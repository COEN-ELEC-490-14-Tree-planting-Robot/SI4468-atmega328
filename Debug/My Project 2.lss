
My Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800100  00000708  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  008002a6  008002a6  00000942  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000009b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040f9  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001159  00000000  00000000  00004d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001553  00000000  00000000  00005ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  00007438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea8  00000000  00000000  00007c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f3f  00000000  00000000  00008ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_17>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_18>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3a       	cpi	r26, 0xA6	; 166
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 ea       	ldi	r26, 0xA6	; 166
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 82 03 	jmp	0x704	; 0x704 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <system_init>
  aa:	08 95       	ret

000000ac <main_station>:
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
	/* Store new index */
	USART_TxHead = tmphead;
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);
  ac:	84 e1       	ldi	r24, 0x14	; 20
  ae:	0e 94 8f 02 	call	0x51e	; 0x51e <SI4468_RX>
  b2:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_0_write>
  b6:	4c 9b       	sbis	0x09, 4	; 9
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <main_station+0x18>
  ba:	6b e0       	ldi	r22, 0x0B	; 11
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <USART_0_write_block>
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	8d e3       	ldi	r24, 0x3D	; 61
  c8:	99 e4       	ldi	r25, 0x49	; 73
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main_station+0x1e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main_station+0x28>
  d4:	00 00       	nop
  d6:	ef cf       	rjmp	.-34     	; 0xb6 <main_station+0xa>

000000d8 <main>:
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <atmel_start_init>
  dc:	78 94       	sei
  de:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <USART_RxHead>
  e2:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <USART_RxTail>
  e6:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <USART_TxHead>
  ea:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <USART_TxTail>
  ee:	0e 94 4e 02 	call	0x49c	; 0x49c <SI4468_INIT>
  f2:	0e 94 56 00 	call	0xac	; 0xac <main_station>

000000f6 <__vector_18>:
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	cf 93       	push	r28
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11e:	8c 2f       	mov	r24, r28
 120:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_0_write>
 124:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <USART_RxHead>
 128:	ef 5f       	subi	r30, 0xFF	; 255
 12a:	ef 73       	andi	r30, 0x3F	; 63
 12c:	e0 93 f2 02 	sts	0x02F2, r30	; 0x8002f2 <USART_RxHead>
 130:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <USART_RxTail>
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ed 50       	subi	r30, 0x0D	; 13
 138:	fd 4f       	sbci	r31, 0xFD	; 253
 13a:	c0 83       	st	Z, r28
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	cf 91       	pop	r28
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_19>:
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <USART_TxHead>
 176:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <USART_TxTail>
 17a:	98 17       	cp	r25, r24
 17c:	69 f0       	breq	.+26     	; 0x198 <__vector_19+0x38>
 17e:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <USART_TxTail>
 182:	ef 5f       	subi	r30, 0xFF	; 255
 184:	ef 73       	andi	r30, 0x3F	; 63
 186:	e0 93 af 02 	sts	0x02AF, r30	; 0x8002af <USART_TxTail>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ef 54       	subi	r30, 0x4F	; 79
 18e:	fd 4f       	sbci	r31, 0xFD	; 253
 190:	80 81       	ld	r24, Z
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <__vector_19+0x42>
 198:	e1 ec       	ldi	r30, 0xC1	; 193
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8f 7d       	andi	r24, 0xDF	; 223
 1a0:	80 83       	st	Z, r24
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_1>:
}

ISR(INT0_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	cf 93       	push	r28
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	EIMSK = (0<<INT0);
 1d8:	1d ba       	out	0x1d, r1	; 29
 *
 * \param[in] pin       The pin number for device
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return PIND & (1 << pin);
 1da:	89 b1       	in	r24, 0x09	; 9
	USART_0_write(PD2_get_level());
 1dc:	82 fb       	bst	r24, 2
 1de:	88 27       	eor	r24, r24
 1e0:	80 f9       	bld	r24, 0
 1e2:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_0_write>
	SI4468_Clear_All_Interrupt(Interrupt_vector);
 1e6:	86 ea       	ldi	r24, 0xA6	; 166
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	0e 94 23 02 	call	0x446	; 0x446 <SI4468_Clear_All_Interrupt>
	for(uint8_t i = 0;i<9;++i)
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	08 c0       	rjmp	.+16     	; 0x202 <__vector_1+0x4e>
		USART_0_write(Interrupt_vector[i]);
 1f2:	ec 2f       	mov	r30, r28
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ea 55       	subi	r30, 0x5A	; 90
 1f8:	fd 4f       	sbci	r31, 0xFD	; 253
 1fa:	80 81       	ld	r24, Z
 1fc:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_0_write>

ISR(INT0_vect){
	EIMSK = (0<<INT0);
	USART_0_write(PD2_get_level());
	SI4468_Clear_All_Interrupt(Interrupt_vector);
	for(uint8_t i = 0;i<9;++i)
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	c9 30       	cpi	r28, 0x09	; 9
 204:	b0 f3       	brcs	.-20     	; 0x1f2 <__vector_1+0x3e>
 206:	89 b1       	in	r24, 0x09	; 9
		USART_0_write(Interrupt_vector[i]);
	USART_0_write(PD2_get_level());
 208:	82 fb       	bst	r24, 2
 20a:	88 27       	eor	r24, r24
 20c:	80 f9       	bld	r24, 0
 20e:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_0_write>
	EIMSK = (1<<INT0);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	8d bb       	out	0x1d, r24	; 29
	uint8_t buff[8];
	uint8_t temp[8];
	SI4468_DoAPI(GET_INT_STATUS,sizeof(GET_INT_STATUS),buff,8);
	USART_0_write_block(temp,8);
	*/
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	cf 91       	pop	r28
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	8f 7e       	andi	r24, 0xEF	; 239
 23e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 240:	85 b1       	in	r24, 0x05	; 5
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 246:	84 b1       	in	r24, 0x04	; 4
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 252:	84 b1       	in	r24, 0x04	; 4
 254:	80 62       	ori	r24, 0x20	; 32
 256:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	8f 7d       	andi	r24, 0xDF	; 223
 25c:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 25e:	84 b1       	in	r24, 0x04	; 4
 260:	84 60       	ori	r24, 0x04	; 4
 262:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 264:	85 b1       	in	r24, 0x05	; 5
 266:	84 60       	ori	r24, 0x04	; 4
 268:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 26a:	8a b1       	in	r24, 0x0a	; 10
 26c:	8b 7f       	andi	r24, 0xFB	; 251
 26e:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	8b b9       	out	0x0b, r24	; 11
	
	//PD2-NIRQ
	
	PD2_set_dir(PORT_DIR_IN);
	PD2_set_pull_mode(PORT_PULL_OFF);
	EIMSK = (1<<INT0);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1<<ISC01)|(0<<ISC00);
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 280:	8a b1       	in	r24, 0x0a	; 10
 282:	8f 7e       	andi	r24, 0xEF	; 239
 284:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	8f 7e       	andi	r24, 0xEF	; 239
 28a:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	80 62       	ori	r24, 0x20	; 32
 290:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	8b b9       	out	0x0b, r24	; 11
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	8f 7b       	andi	r24, 0xBF	; 191
 29c:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	8b b9       	out	0x0b, r24	; 11
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	8f 77       	andi	r24, 0x7F	; 127
 2a8:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8f 77       	andi	r24, 0x7F	; 127
 2ae:	8b b9       	out	0x0b, r24	; 11
	
	//PD7-GPIO3 RX_STATE
	PD7_set_dir(PORT_DIR_IN);
	PD7_set_pull_mode(PORT_PULL_OFF);
	
	SPI_0_init();
 2b0:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_0_init>
 2b4:	08 95       	ret

000002b6 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 2b6:	8a b1       	in	r24, 0x0a	; 10
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 2c2:	8a b1       	in	r24, 0x0a	; 10
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	8d 7f       	andi	r24, 0xFD	; 253
 2cc:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 2ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <USART_0_init>
 2d2:	08 95       	ret

000002d4 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 2d4:	8f ee       	ldi	r24, 0xEF	; 239
 2d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 2da:	84 b1       	in	r24, 0x04	; 4
 2dc:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 2de:	85 b1       	in	r24, 0x05	; 5
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 2e4:	87 b1       	in	r24, 0x07	; 7
 2e6:	80 78       	andi	r24, 0x80	; 128
 2e8:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 2ea:	88 b1       	in	r24, 0x08	; 8
 2ec:	8f 67       	ori	r24, 0x7F	; 127
 2ee:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 2f0:	8a b1       	in	r24, 0x0a	; 10
 2f2:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	60 e8       	ldi	r22, 0x80	; 128
 2fc:	81 e6       	ldi	r24, 0x61	; 97
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 89 01 	call	0x312	; 0x312 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 304:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 306:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	USART_0_initialization();
 308:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_0_initialization>
	
	SPI_0_initialization();
 30c:	0e 94 1d 01 	call	0x23a	; 0x23a <SPI_0_initialization>
 310:	08 95       	ret

00000312 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 312:	2f b7       	in	r18, 0x3f	; 63
	cli
 314:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 316:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 318:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 31a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 31c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 31e:	08 95       	ret

00000320 <SI4468_WaitCTS>:
		// Reset packet length back to max for receive mode
		setProperty(PKT_FIELD_2_LENGTH_LOW, MAX_PACKET_LEN);
		#endif
		
	return SUCCESS;
}
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	12 c0       	rjmp	.+36     	; 0x350 <SI4468_WaitCTS+0x30>
 32c:	85 b1       	in	r24, 0x05	; 5
 32e:	8b 7f       	andi	r24, 0xFB	; 251
 330:	85 b9       	out	0x05, r24	; 5
 332:	8a e1       	ldi	r24, 0x1A	; 26
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <SI4468_WaitCTS+0x14>
 338:	00 c0       	rjmp	.+0      	; 0x33a <SI4468_WaitCTS+0x1a>
 33a:	84 e4       	ldi	r24, 0x44	; 68
 33c:	0e 94 1d 03 	call	0x63a	; 0x63a <SPI_0_exchange_byte>
 340:	95 b1       	in	r25, 0x05	; 5
 342:	94 60       	ori	r25, 0x04	; 4
 344:	95 b9       	out	0x05, r25	; 5
 346:	21 96       	adiw	r28, 0x01	; 1
 348:	c5 3c       	cpi	r28, 0xC5	; 197
 34a:	99 e0       	ldi	r25, 0x09	; 9
 34c:	d9 07       	cpc	r29, r25
 34e:	24 f4       	brge	.+8      	; 0x358 <SI4468_WaitCTS+0x38>
 350:	8f 3f       	cpi	r24, 0xFF	; 255
 352:	61 f7       	brne	.-40     	; 0x32c <SI4468_WaitCTS+0xc>
 354:	80 e5       	ldi	r24, 0x50	; 80
 356:	01 c0       	rjmp	.+2      	; 0x35a <SI4468_WaitCTS+0x3a>
 358:	86 e4       	ldi	r24, 0x46	; 70
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <getResponse>:
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	8c 01       	movw	r16, r24
 36a:	d6 2f       	mov	r29, r22
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	84 e4       	ldi	r24, 0x44	; 68
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 45 03 	call	0x68a	; 0x68a <SPI_0_write_block>
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	0e 94 1d 03 	call	0x63a	; 0x63a <SPI_0_exchange_byte>
 37c:	c8 2f       	mov	r28, r24
 37e:	88 23       	and	r24, r24
 380:	21 f0       	breq	.+8      	; 0x38a <getResponse+0x2a>
 382:	6d 2f       	mov	r22, r29
 384:	c8 01       	movw	r24, r16
 386:	0e 94 39 03 	call	0x672	; 0x672 <SPI_0_exchange_block>
 38a:	8c 2f       	mov	r24, r28
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <waitForResponse>:
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	7c 01       	movw	r14, r24
 3a4:	16 2f       	mov	r17, r22
 3a6:	04 2f       	mov	r16, r20
 3a8:	c0 e4       	ldi	r28, 0x40	; 64
 3aa:	dc e9       	ldi	r29, 0x9C	; 156
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <waitForResponse+0x28>
 3ae:	8a e1       	ldi	r24, 0x1A	; 26
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <waitForResponse+0x1a>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <waitForResponse+0x20>
 3b6:	00 23       	and	r16, r16
 3b8:	11 f0       	breq	.+4      	; 0x3be <waitForResponse+0x28>
 3ba:	21 97       	sbiw	r28, 0x01	; 1
 3bc:	41 f0       	breq	.+16     	; 0x3ce <waitForResponse+0x38>
 3be:	61 2f       	mov	r22, r17
 3c0:	c7 01       	movw	r24, r14
 3c2:	0e 94 b0 01 	call	0x360	; 0x360 <getResponse>
 3c6:	88 23       	and	r24, r24
 3c8:	91 f3       	breq	.-28     	; 0x3ae <waitForResponse+0x18>
 3ca:	80 e5       	ldi	r24, 0x50	; 80
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <waitForResponse+0x3a>
 3ce:	86 e4       	ldi	r24, 0x46	; 70
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	08 95       	ret

000003de <SI4468_DoAPI>:
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	7c 01       	movw	r14, r24
 3ec:	8a 01       	movw	r16, r20
 3ee:	d2 2f       	mov	r29, r18
 3f0:	0e 94 90 01 	call	0x320	; 0x320 <SI4468_WaitCTS>
 3f4:	c8 2f       	mov	r28, r24
 3f6:	80 35       	cpi	r24, 0x50	; 80
 3f8:	e1 f4       	brne	.+56     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3fa:	f7 01       	movw	r30, r14
 3fc:	80 81       	ld	r24, Z
 3fe:	87 31       	cpi	r24, 0x17	; 23
 400:	41 f4       	brne	.+16     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 cb 01 	call	0x396	; 0x396 <waitForResponse>
 40e:	80 35       	cpi	r24, 0x50	; 80
 410:	99 f0       	breq	.+38     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 412:	01 15       	cp	r16, r1
 414:	11 05       	cpc	r17, r1
 416:	39 f0       	breq	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	6d 2f       	mov	r22, r29
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 cb 01 	call	0x396	; 0x396 <waitForResponse>
 422:	80 35       	cpi	r24, 0x50	; 80
 424:	49 f0       	breq	.+18     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 426:	0e 94 90 01 	call	0x320	; 0x320 <SI4468_WaitCTS>
 42a:	88 23       	and	r24, r24
 42c:	21 f0       	breq	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 42e:	8c 2f       	mov	r24, r28
 430:	03 c0       	rjmp	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 432:	86 e4       	ldi	r24, 0x46	; 70
 434:	01 c0       	rjmp	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	86 e4       	ldi	r24, 0x46	; 70
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <SI4468_Clear_All_Interrupt>:
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	1f 92       	push	r1
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	20 e2       	ldi	r18, 0x20	; 32
 452:	29 83       	std	Y+1, r18	; 0x01
 454:	29 e0       	ldi	r18, 0x09	; 9
 456:	ac 01       	movw	r20, r24
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	0e 94 ef 01 	call	0x3de	; 0x3de <SI4468_DoAPI>
 462:	0f 90       	pop	r0
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <SI4468_Clear_Some_Interrupts>:
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	00 d0       	rcall	.+0      	; 0x470 <SI4468_Clear_Some_Interrupts+0x6>
 470:	00 d0       	rcall	.+0      	; 0x472 <SI4468_Clear_Some_Interrupts+0x8>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	30 e2       	ldi	r19, 0x20	; 32
 478:	39 83       	std	Y+1, r19	; 0x01
 47a:	6a 83       	std	Y+2, r22	; 0x02
 47c:	4b 83       	std	Y+3, r20	; 0x03
 47e:	2c 83       	std	Y+4, r18	; 0x04
 480:	28 e0       	ldi	r18, 0x08	; 8
 482:	ac 01       	movw	r20, r24
 484:	64 e0       	ldi	r22, 0x04	; 4
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	0e 94 ef 01 	call	0x3de	; 0x3de <SI4468_DoAPI>
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <SI4468_INIT>:
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	61 97       	sbiw	r28, 0x11	; 17
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <SI4468_INIT+0x36>
 4b6:	fc 01       	movw	r30, r24
 4b8:	e9 5e       	subi	r30, 0xE9	; 233
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	21 e1       	ldi	r18, 0x11	; 17
 4be:	de 01       	movw	r26, r28
 4c0:	11 96       	adiw	r26, 0x01	; 1
 4c2:	01 90       	ld	r0, Z+
 4c4:	0d 92       	st	X+, r0
 4c6:	2a 95       	dec	r18
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <SI4468_INIT+0x26>
 4ca:	29 81       	ldd	r18, Y+1	; 0x01
 4cc:	82 0f       	add	r24, r18
 4ce:	91 1d       	adc	r25, r1
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	8d 38       	cpi	r24, 0x8D	; 141
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	92 07       	cpc	r25, r18
 4d8:	70 f3       	brcs	.-36     	; 0x4b6 <SI4468_INIT+0x1a>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 23 02 	call	0x446	; 0x446 <SI4468_Clear_All_Interrupt>
 4e2:	61 96       	adiw	r28, 0x11	; 17
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <SI4468_SetState>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <SI4468_SetState+0x6>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	94 e3       	ldi	r25, 0x34	; 52
 500:	99 83       	std	Y+1, r25	; 0x01
 502:	8a 83       	std	Y+2, r24	; 0x02
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	62 e0       	ldi	r22, 0x02	; 2
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	0e 94 ef 01 	call	0x3de	; 0x3de <SI4468_DoAPI>
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <SI4468_RX>:

uint8_t SI4468_RX(uint8_t channel)
{
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	28 97       	sbiw	r28, 0x08	; 8
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	18 2f       	mov	r17, r24
		SI4468_SetState(IDLE_STATE);
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SI4468_SetState>
		//clearFIFO();
		//fix_invalidSync_irq(0);
		//Si446x_setupCallback(SI446X_CBS_INVALIDSYNC, 0);
		//setProperty(SI446X_PKT_FIELD_2_LENGTH_LOW, MAX_PACKET_LEN); // TODO ?
		SI4468_Clear_Some_Interrupts(NULL, 0, 0, 0xFF); // TODO needed?
 53c:	2f ef       	ldi	r18, 0xFF	; 255
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 35 02 	call	0x46a	; 0x46a <SI4468_Clear_Some_Interrupts>

		// TODO RX timeout to sleep if WUT LDC enabled
		uint8_t data[] = {
 54a:	82 e3       	ldi	r24, 0x32	; 50
 54c:	89 83       	std	Y+1, r24	; 0x01
 54e:	1a 83       	std	Y+2, r17	; 0x02
 550:	1b 82       	std	Y+3, r1	; 0x03
 552:	1c 82       	std	Y+4, r1	; 0x04
 554:	1d 82       	std	Y+5, r1	; 0x05
 556:	1e 82       	std	Y+6, r1	; 0x06
 558:	83 e0       	ldi	r24, 0x03	; 3
 55a:	8f 83       	std	Y+7, r24	; 0x07
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	88 87       	std	Y+8, r24	; 0x08
			SI4468_FIXED_LENGTH,
			SI446X_STATE_NOCHANGE, // RX Timeout
			IDLE_STATE, // RX Valid
			SI446X_STATE_SLEEP // IDLE_STATE // RX Invalid (using SI446X_STATE_SLEEP for the INVALID_SYNC fix)
		};
		return SI4468_DoAPI(data, sizeof(data), NULL, 0);
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	68 e0       	ldi	r22, 0x08	; 8
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	0e 94 ef 01 	call	0x3de	; 0x3de <SI4468_DoAPI>
}
 570:	28 96       	adiw	r28, 0x08	; 8
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	de bf       	out	0x3e, r29	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	cd bf       	out	0x3d, r28	; 61
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	08 95       	ret

00000584 <SPI_0_init>:
 * \retval false SPI bus is not DONE
 */
bool SPI_0_status_done()
{
	return (SPI_0_desc.status == SPI_DONE);
}
 584:	e4 e6       	ldi	r30, 0x64	; 100
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	8b 7f       	andi	r24, 0xFB	; 251
 58c:	80 83       	st	Z, r24
 58e:	80 ed       	ldi	r24, 0xD0	; 208
 590:	8c bd       	out	0x2c, r24	; 44
 592:	e3 e3       	ldi	r30, 0x33	; 51
 594:	f3 e0       	ldi	r31, 0x03	; 3
 596:	10 82       	st	Z, r1
 598:	16 82       	std	Z+6, r1	; 0x06
 59a:	15 82       	std	Z+5, r1	; 0x05
 59c:	08 95       	ret

0000059e <__vector_17>:
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
 5c0:	9e b5       	in	r25, 0x2e	; 46
 5c2:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <SPI_0_desc+0x4>
 5c6:	82 30       	cpi	r24, 0x02	; 2
 5c8:	29 f0       	breq	.+10     	; 0x5d4 <__vector_17+0x36>
 5ca:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <SPI_0_desc+0x1>
 5ce:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <SPI_0_desc+0x2>
 5d2:	90 83       	st	Z, r25
 5d4:	e3 e3       	ldi	r30, 0x33	; 51
 5d6:	f3 e0       	ldi	r31, 0x03	; 3
 5d8:	a1 81       	ldd	r26, Z+1	; 0x01
 5da:	b2 81       	ldd	r27, Z+2	; 0x02
 5dc:	9d 01       	movw	r18, r26
 5de:	2f 5f       	subi	r18, 0xFF	; 255
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	32 83       	std	Z+2, r19	; 0x02
 5e4:	21 83       	std	Z+1, r18	; 0x01
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <__vector_17+0x52>
 5ea:	11 96       	adiw	r26, 0x01	; 1
 5ec:	9c 91       	ld	r25, X
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <__vector_17+0x54>
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	e3 e3       	ldi	r30, 0x33	; 51
 5f4:	f3 e0       	ldi	r31, 0x03	; 3
 5f6:	83 81       	ldd	r24, Z+3	; 0x03
 5f8:	81 50       	subi	r24, 0x01	; 1
 5fa:	83 83       	std	Z+3, r24	; 0x03
 5fc:	88 23       	and	r24, r24
 5fe:	11 f0       	breq	.+4      	; 0x604 <__vector_17+0x66>
 600:	9e bd       	out	0x2e, r25	; 46
 602:	0a c0       	rjmp	.+20     	; 0x618 <__vector_17+0x7a>
 604:	e3 e3       	ldi	r30, 0x33	; 51
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	80 83       	st	Z, r24
 60c:	05 80       	ldd	r0, Z+5	; 0x05
 60e:	f6 81       	ldd	r31, Z+6	; 0x06
 610:	e0 2d       	mov	r30, r0
 612:	30 97       	sbiw	r30, 0x00	; 0
 614:	09 f0       	breq	.+2      	; 0x618 <__vector_17+0x7a>
 616:	09 95       	icall
 618:	ff 91       	pop	r31
 61a:	ef 91       	pop	r30
 61c:	bf 91       	pop	r27
 61e:	af 91       	pop	r26
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	7f 91       	pop	r23
 626:	6f 91       	pop	r22
 628:	5f 91       	pop	r21
 62a:	4f 91       	pop	r20
 62c:	3f 91       	pop	r19
 62e:	2f 91       	pop	r18
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <SPI_0_exchange_byte>:

uint8_t SPI_0_exchange_byte(uint8_t data)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	1f 92       	push	r1
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	89 83       	std	Y+1, r24	; 0x01
	SPI_0_desc.data   = (uint8_t *)&data;
 646:	e3 e3       	ldi	r30, 0x33	; 51
 648:	f3 e0       	ldi	r31, 0x03	; 3
 64a:	9e 01       	movw	r18, r28
 64c:	2f 5f       	subi	r18, 0xFF	; 255
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	32 83       	std	Z+2, r19	; 0x02
 652:	21 83       	std	Z+1, r18	; 0x01
	SPI_0_desc.size   = 1;
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	93 83       	std	Z+3, r25	; 0x03
	SPI_0_desc.type   = SPI_READ;
 658:	94 83       	std	Z+4, r25	; 0x04
	SPI_0_desc.status = SPI_BUSY;
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	90 83       	st	Z, r25

	SPDR = *SPI_0_desc.data;
 65e:	8e bd       	out	0x2e, r24	; 46
	while (SPI_0_desc.status == SPI_BUSY)
 660:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <SPI_0_desc>
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	e1 f3       	breq	.-8      	; 0x660 <SPI_0_exchange_byte+0x26>
		;
	return data;
}
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	0f 90       	pop	r0
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <SPI_0_exchange_block>:

void SPI_0_exchange_block(void *block, uint8_t size)
{
	SPI_0_desc.data   = (uint8_t *)block;
 672:	e3 e3       	ldi	r30, 0x33	; 51
 674:	f3 e0       	ldi	r31, 0x03	; 3
 676:	92 83       	std	Z+2, r25	; 0x02
 678:	81 83       	std	Z+1, r24	; 0x01
	SPI_0_desc.size   = size;
 67a:	63 83       	std	Z+3, r22	; 0x03
	SPI_0_desc.type   = SPI_EXCHANGE;
 67c:	14 82       	std	Z+4, r1	; 0x04
	SPI_0_desc.status = SPI_BUSY;
 67e:	22 e0       	ldi	r18, 0x02	; 2
 680:	20 83       	st	Z, r18

	SPDR = *SPI_0_desc.data;
 682:	fc 01       	movw	r30, r24
 684:	80 81       	ld	r24, Z
 686:	8e bd       	out	0x2e, r24	; 46
 688:	08 95       	ret

0000068a <SPI_0_write_block>:
}

void SPI_0_write_block(void *block, uint8_t size)
{
	//USART_0_write_block(block,size);
	SPI_0_desc.data   = (uint8_t *)block;
 68a:	e3 e3       	ldi	r30, 0x33	; 51
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	92 83       	std	Z+2, r25	; 0x02
 690:	81 83       	std	Z+1, r24	; 0x01
	SPI_0_desc.size   = size;
 692:	63 83       	std	Z+3, r22	; 0x03
	SPI_0_desc.type   = SPI_WRITE;
 694:	22 e0       	ldi	r18, 0x02	; 2
 696:	24 83       	std	Z+4, r18	; 0x04
	SPI_0_desc.status = SPI_BUSY;
 698:	20 83       	st	Z, r18
	SPDR = *SPI_0_desc.data;
 69a:	fc 01       	movw	r30, r24
 69c:	80 81       	ld	r24, Z
 69e:	8e bd       	out	0x2e, r24	; 46
 6a0:	08 95       	ret

000006a2 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 6a2:	e4 e6       	ldi	r30, 0x64	; 100
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	8d 7f       	andi	r24, 0xFD	; 253
 6aa:	80 83       	st	Z, r24
 6ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6b0:	80 e1       	ldi	r24, 0x10	; 16
 6b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 6b6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6ba:	88 e9       	ldi	r24, 0x98	; 152
 6bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 6c0:	86 e0       	ldi	r24, 0x06	; 6
 6c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret

000006ca <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 6ca:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6ce:	95 ff       	sbrs	r25, 5
 6d0:	fc cf       	rjmp	.-8      	; 0x6ca <USART_0_write>
		;
	UDR0 = data;
 6d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6d6:	08 95       	ret

000006d8 <USART_0_write_block>:
}

void USART_0_write_block(const char * data,  uint8_t size )
{
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	8c 01       	movw	r16, r24
 6e2:	d6 2f       	mov	r29, r22
	for(uint8_t i = 0;i<size;i++)
 6e4:	c0 e0       	ldi	r28, 0x00	; 0
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <USART_0_write_block+0x1e>
		USART_0_write(data[i]);
 6e8:	f8 01       	movw	r30, r16
 6ea:	ec 0f       	add	r30, r28
 6ec:	f1 1d       	adc	r31, r1
 6ee:	80 81       	ld	r24, Z
 6f0:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_0_write>
	UDR0 = data;
}

void USART_0_write_block(const char * data,  uint8_t size )
{
	for(uint8_t i = 0;i<size;i++)
 6f4:	cf 5f       	subi	r28, 0xFF	; 255
 6f6:	cd 17       	cp	r28, r29
 6f8:	b8 f3       	brcs	.-18     	; 0x6e8 <USART_0_write_block+0x10>
		USART_0_write(data[i]);
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	08 95       	ret

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>
